import asyncio
import logging
import os
from datetime import datetime, timedelta, timezone
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from zoneinfo import ZoneInfo
from dotenv import load_dotenv
from holidays_parser import get_holidays

offset = timedelta(hours=3)
timezone(offset, name='–ú–°–ö')

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

subscribed_chats = set()  # –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

# --- –ö–Ω–æ–ø–∫–∏ ---
def main_menu():
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫ —Å–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton(text="üìÖ –ü—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞ –¥–∞—Ç—É", callback_data="by_date")]
    ])
    return markup

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def start(message: types.Message):
    subscribed_chats.add(message.chat.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.callback_query(lambda c: c.data == "today")
async def callback_today(callback: types.CallbackQuery):
    holidays = get_holidays()
    text = "üéâ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n" + "\n".join(holidays)
    await callback.message.answer(text)

@dp.callback_query(lambda c: c.data == "by_date")
async def callback_by_date(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 12.09):")
    dp.message.register(handle_date_input)

async def handle_date_input(message: types.Message):
    date_str = message.text.strip()
    holidays = get_holidays(date_str)
    if holidays:
        text = f"üéâ –ù–∞ {date_str} –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n" + "\n".join(holidays)
    else:
        text = f"–ù–∞ {date_str} –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    await message.answer(text)

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ---
async def send_daily_holiday():
    holidays = get_holidays()
    text = "üéâ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:\n" + "\n".join(holidays)
    for chat_id in subscribed_chats:
        try:
            await bot.send_message(chat_id, text)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    scheduler = AsyncIOScheduler(timezone=ZoneInfo("Europe/Moscow"))
    scheduler.add_job(send_daily_holiday, "cron", hour=7, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
